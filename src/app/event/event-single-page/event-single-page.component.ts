import { Component } from '@angular/core';
import {MatDialog, MatDialogRef} from '@angular/material/dialog';
import {InvitePeopleComponent} from '../../invitation/invite-people/invite-people.component';
import {ActivatedRoute} from '@angular/router';
import {EventService} from '../event.service';
import {SimpleEventDTO} from '../../shared/dto/events/simpleEventDTO.model';
import {EventDTO} from '../../shared/dto/events/eventDTO.model';
import {environment} from '../../../env/envirements';
import {DatePipe} from '@angular/common';
import jsPDF from 'jspdf';
import {PriceManagementDTO} from '../../shared/dto/prices/PriceManagementDTO.model';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-event-single-page',
  templateUrl: './event-single-page.component.html',
  styleUrl: './event-single-page.component.css'
})
export class EventSinglePageComponent {
  id: string;
  eventDetails: EventDTO;
  location: string;
  image: string;
  time: string;
  datePipe = new DatePipe('en-US');


  constructor(public dialog: MatDialog, private route: ActivatedRoute, private eventService: EventService) {
  }

  ngOnInit(): void {
    this.id = this.route.snapshot.paramMap.get('id');
    console.log('Event ID', this.id);
    this.eventService.getEvent(this.id).subscribe({
      next: (event) => {
        console.log('Event found', event);
        this.image = environment.apiImagesHost + event.picture;
        this.time = this.datePipe.transform(event.time, 'HH:mm, dd.MM.yyyy');
        this.eventDetails = event
        this.location = event.location.address + ", " + event.location.city;
      },
      error: (err) => {
        console.error('Error finding event', err);
      },
    });

  }

  exportToPDF() {
    const pdf: jsPDF = new jsPDF('p', 'mm', 'a4'); // A4 size page of PDF

    // Title Section
    const title = this.eventDetails.name;  // Event Name
    pdf.setFontSize(24);
    pdf.setTextColor(0, 51, 102); // Dark blue color for title
    pdf.setFont("helvetica", "bold");
    pdf.text(title, 105, 20, { align: "center" });

    // Event Description Section
    const description = this.eventDetails.description;
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0); // Black text for description
    pdf.setFont("helvetica", "normal");
    pdf.text(description, 15, 40, { maxWidth: 180 });

    // Line Separator
    pdf.setDrawColor(0, 51, 102); // Dark blue line
    pdf.line(15, 60, 195, 60);  // Draw line after description

    // Event Location and Time Section
    pdf.setFontSize(14);
    pdf.setTextColor(7, 59, 76); // Slightly lighter blue for sub-headings
    pdf.text('Location:', 15, 70);
    pdf.setFontSize(12);
    pdf.text(this.location, 15, 80);

    pdf.setFontSize(14);
    pdf.setTextColor(7, 59, 76);
    pdf.text('Time:', 15, 90);
    pdf.setFontSize(12);
    pdf.text(this.time, 15, 100);

    // Privacy Section
    pdf.setFontSize(14);
    pdf.setTextColor(7, 59, 76);
    pdf.text('Privacy:', 15, 110);
    pdf.setFontSize(12);
    pdf.text(this.eventDetails.privacy ? 'Public' : 'Private', 15, 120);

    // Optional: Include an image (event picture)
    if (this.image) {
      const img = this.image;  // Replace with actual image URL or base64 string
      pdf.addImage(img, 'JPEG', 15, 150, 180, 100);  // Image within the document
    }

    // Footer
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150); // Light gray for footer text
    pdf.text('Generated by EventHopper', 105, 285, { align: "center" });

    // Save the PDF
    pdf.save(`${this.eventDetails.name}.pdf`);
  }

  openInviteModal() {
    const dialogRef: MatDialogRef<InvitePeopleComponent> = this.dialog.open(InvitePeopleComponent, {
      minWidth: '70vw',
      maxWidth: '70vw',
      minHeight: '70vh',
      maxHeight: '70vh',
    });

  }
}
